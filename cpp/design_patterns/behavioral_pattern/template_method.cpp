// Source: http://cpp-reference.ru/patterns/behavioral-patterns/template-method/
// CODE DOES NOT WORK

/*

 Имеются два разных, но в тоже время очень похожих компонента. Вы хотите внести изменения в оба компонента, избежав 
 дублирования кода.

 Проектировщик компонента решает, какие шаги алгоритма являются неизменными (или стандартными), а какие изменяемыми 
 (или настраиваемыми). Абстрактный базовый класс реализует стандартные шаги алгоритма и может предоставлять (или нет) 
 реализацию по умолчанию для настраиваемых шагов. Изменяемые шаги могут (или должны) предоставляться клиентом 
 компонента в конкретных производных классах.

 Проектировщик компонента определяет необходимые шаги алгоритма, порядок их выполнения, но позволяет клиентам 
 компонента расширять или замещать некоторые из этих шагов.

 Назначение паттерна Template Method
    - Паттерн Template Method определяет основу алгоритма и позволяет подклассам изменить некоторые шаги этого 
    алгоритма без изменения его общей структуры.
    - Базовый класс определяет шаги алгоритма с помощью абстрактных операций, а производные классы их реализуют.
*/

// example

#include <iostream>
using namespace std;

class Base
{
    void a()
    {
        cout << "a  ";
    }
    void c()
    {
        cout << "c  ";
    }
    void e()
    {
        cout << "e  ";
    }
    // 2. Для шагов, требующих особенной реализации, определите
    //    "замещающие" методы.
    virtual void ph1() = 0;
    virtual void ph2() = 0;
public:
    // 1. Стандартизуйте основу алгоритма в шаблонном методе
    //    базового класса
    void execute()
    {
        a();
        ph1();
        c();
        ph2();
        e();
    }
};

class One: public Base
{
    // 3. Производные классы реализуют "замещающие" методы.
    /*virtual*/void ph1()
    {
        cout << "b  ";
    }
    /*virtual*/void ph2()
    {
        cout << "d  ";
    }
};

class Two: public Base
{
    /*virtual*/void ph1()
    {
        cout << "2  ";
    }
    /*virtual*/void ph2()
    {
        cout << "4  ";
    }
};

int main()
{
    Base *array[] =
            {
                    &One(), &Two()
            };
    for (int i = 0; i < 2; i++)
    {
        array[i]->execute();
        cout << '\n';
    }
}
